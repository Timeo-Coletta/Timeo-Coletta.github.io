[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Timeo Coletta",
    "section": "",
    "text": "“Hello! My name is Timeo. I’m a student at Pomona College studying International Relations, Economics, and Data Science. Outside of school, I play on a cross-collegiate rugby team and I enjoy playing football. Welcome to my website!”"
  },
  {
    "objectID": "09-9 Passport Index.html",
    "href": "09-9 Passport Index.html",
    "title": "09-9 Passport Index",
    "section": "",
    "text": "Show the code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(jsonlite)\nlibrary(purrr)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(sf)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\n\ncountry_lists &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-09/country_lists.csv')\nrank_by_year &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-09/rank_by_year.csv')\n\n\n\n\nShow the code\ntravel_perms &lt;- country_lists |&gt; \n  pivot_longer(\n    cols = c(visa_required, visa_online, visa_on_arrival, \n             visa_free_access, electronic_travel_authorisation),\n    names_to = \"visa_type\",\n    values_to = \"json_str\"\n ) |&gt; \n  mutate(\n    json_parsed = map(json_str, ~ fromJSON(.)[[1]])\n) |&gt; \n  unnest(json_parsed, names_sep = \"_\") |&gt; \n  select(-json_str) |&gt; \n  rename(from = code, from_name = country,\n         to = json_parsed_code, to_name = json_parsed_name) |&gt; \n  mutate(from = ifelse(from_name == \"Namibia\", \"NA\", from)) \n\n# adding the home countries so that they show up on the map\nhome_countries &lt;- travel_perms |&gt; \n  select(from, from_name) |&gt; \n  distinct() |&gt; \n  mutate(visa_type = \"domestic\",\n         to = from,\n         to_name = from_name)\ntravel_perms &lt;- travel_perms |&gt; rbind(home_countries)\n\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\nworld_data &lt;- world |&gt; \n  left_join(travel_perms, by = c(\"iso_a2_eh\" = \"to\"))\n\n\n\n\nShow the code\nplot_ly(world_data) |&gt; \n  add_sf(\n    data = world_data |&gt; filter(from == \"MX\"),\n    split = ~iso_a2_eh,\n    color = ~visa_type,\n    text = ~paste(\"Country:\", to_name, \"&lt;br&gt;Visa:\", visa_type),\n    hoveron = \"fills\"\n  ) |&gt; \n  layout(title = \" Visa Connections for Mexicans\",    showlegend = FALSE)"
  },
  {
    "objectID": "09-16 Recipes.html",
    "href": "09-16 Recipes.html",
    "title": "09-16 Recipes",
    "section": "",
    "text": "Show the code\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(fontawesome)\nfontawesome::fa_html_dependency()\n\n\n\n\n\n\n\nShow the code\nall_recipes &lt;- readr::read_csv ('https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-09-16/all_recipes.csv')\ncuisines &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-16/cuisines.csv') |&gt; \n  mutate(name_link = paste0('&lt;a href = \"',url,'\"&gt;',name,'&lt;/a&gt;')) |&gt; \n  rename(cuisine = country) |&gt; \n  mutate(full = floor(avg_rating + 0.25),\n         half = ifelse((avg_rating + 0.25 - full) &gt;= 0.5, 1, 0),\n         empty = 5 - full - half) |&gt; \n  mutate(stars = ifelse(is.na(avg_rating), NA,\n                              paste0( \n    strrep('&lt;span style=\"color: gold;\"&gt;&#9733;&lt;/span&gt;', full),   # ★\n    strrep('&lt;span style=\"color: gold;\"&gt;&lt;i class=\"fa-solid fa-star-half\"&gt;&lt;/i&gt;&lt;/span&gt;', half),    # optional placeholder for half\n    strrep('&lt;span style=\"color: lightgray;\"&gt;&#9733;&lt;/span&gt;', empty) # ☆ in grey\n  \n)))\n\n\n\n\nShow the code\ncuisines |&gt; \n  select(name_link, stars, cuisine, calories, fat, carbs,\n         protein, avg_rating, total_ratings, reviews,\n         prep_time, cook_time, total_time, servings) |&gt; \n  janitor::clean_names(case = \"title\") |&gt; \n  DT::datatable(escape = FALSE,\n                class = 'display',\n                extensions = 'Buttons',\n                rownames = FALSE,\n                filter = 'top',\n                options = list(\n                  dom = 'Bfrtip',\n                  buttons = list(\n                    list(extend = 'colvis', \n                         text = 'select nutritional info',\n                         columns = c(3:6)),\n                    list(extend = 'colvis', \n                         text = 'select rating info',\n                         columns = c(7:9)),                    \n                    list(extend = 'colvis', \n                         text = 'select cook info',\n                         columns = c(10:13))  \n                    ),\n                  columnDefs = list(list(visible = FALSE,\n                                         targets = c(3:13)))\n                ))"
  },
  {
    "objectID": "09-2 Frogs.html",
    "href": "09-2 Frogs.html",
    "title": "09-2 Frogs",
    "section": "",
    "text": "Show the code\nlibrary(maps)\nlibrary(tidyverse)\nlibrary(plotly)\n\n\n\n\nShow the code\nfrogID_data &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-02/frogID_data.csv') |&gt; \n  mutate(month = month(eventDate),\n         season = case_when(\n           month %in% c(12, 1, 2) ~ \"winter\",\n           month %in% c(3, 4, 5) ~ \"spring\",\n           month %in% c(6, 7, 8) ~ \"summer\",\n           month %in% c(9, 10, 11) ~ \"fall\"\n         ))\nfrog_names &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-09-02/frog_names.csv')\n\nall_frogs &lt;- frogID_data |&gt;\n  left_join(frog_names, by = \"scientificName\") |&gt; \n  mutate(genus = stringr::str_extract(scientificName, \"^\\\\w+\"))\n\n\n\n\nShow the code\nlibrary(Polychrome)\nmycols &lt;- createPalette(26, c(\"#ff0000\", \"#00ff00\", \"#0000ff\"))\nnames(mycols) &lt;- all_frogs |&gt; select(genus) |&gt; unique() |&gt; pull()\n\n\n\n\nShow the code\naustralia_map &lt;- maps::map(database = \"world\", region = \"Australia\",\n                     plot = FALSE)\n\n\n\n\nShow the code\nggplot(data = australia_map, \n       aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"white\", color = \"blue\") + \n  geom_point(data = all_frogs,\n             aes(x = decimalLongitude, \n                 y = decimalLatitude, \n                 color = genus),\n             size = 1,\n             inherit.aes = FALSE) +\n  theme_minimal() +\n  ggtitle(\"Frogs in Australia: 2023\") + \n  facet_wrap(~season) + \n  labs(x = \"\", y = \"\") +\n  scale_color_manual(values = mycols)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data = australia_map, \n       aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"white\", color = \"blue\") + \n  geom_point(data = all_frogs,\n             aes(x = decimalLongitude, \n                 y = decimalLatitude, \n                 color = genus),\n             size = 1,\n             inherit.aes = FALSE) +\n  theme_minimal() + \n  theme(\n        panel.background = element_rect(fill = \"lightsteelblue\"), \n        panel.grid.major = element_line(color = \"lightsteelblue\"), \n        panel.grid.minor = element_line(color = \"lightsteelblue2\"), \n        axis.text = element_text(color = \"black\"),      \n        axis.title = element_text(color = \"black\") ) +\n  ggtitle(\"Frogs in Australia: 2023\") + \n  facet_wrap(~season) + \n  labs(x = \"\", y = \"\") +\n  scale_color_manual(values = mycols)\n  \n  \nggplotly(p, tooltip = \"genus\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site [Work in Progress["
  }
]